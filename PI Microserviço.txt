Projeto Integrador 

Kayque Chineider Pereira 

Arquitetura Microserviços



Há alguns anos o termo microservices (ou no português é chamado de MicroServiços) tem sido muito procurado na área de desenvolvimento de software e alguns desenvolvedores tem citado que esse termo é usado pra descrever uma filosofia de design de arquitetura de software. Embora não exista uma definição precisa, há características comuns entre as implementações que alegam utilizá-la.
Ao analisar os microservices, vemos que eles alcançaram rapidamente o topo do mundo de desenvolvimento de software e desempenham um papel importante em muitas organizações de hoje em dia. Portanto se você entrou neste artigo, provavelmente é porque está procurando algum artigo referente a microservices e hoje resolvi escrever um post para explicar no detalhe dessa arquitetura.
O que é uma arquitetura de microservices resumida?
Segundo o Martin Fowler, ele cita que o termo de “Arquitetura de microserviços” surgiu nos últimos anos para descrever uma maneira particular de projetar aplicativos de software como conjuntos de serviços implantáveis ​​independentemente.
Arquitetura de Microservices: Resumo para Apresentação
A arquitetura de microservices adota a ideia de dividir uma aplicação em pequenos serviços independentes e fracamente acoplados, cada um com responsabilidade sobre uma parte específica do domínio de negócios. Esses serviços podem ser desenvolvidos, implantados e mantidos de forma independente, e se comunicam entre si por meio de APIs simples.

Benefícios principais:
Escalabilidade individual: Cada microservice pode ser escalado de forma independente.
Resiliência: Se um serviço falhar, apenas uma funcionalidade ficará indisponível, e não a aplicação inteira.
Agilidade: Facilita o deploy de novas funcionalidades e atualizações.
Tecnologias diversas: Permite o uso de diferentes tecnologias para diferentes serviços.

Aplicação clinica Médica 


Em uma aplicação de clínica médica, a arquitetura de microserviços pode ser estruturada para dividir as funcionalidades da plataforma em serviços independentes, escaláveis e fáceis de manter. A seguir estão alguns exemplos de como a arquitetura pode ser organizada:

1. Serviço de Pacientes
Responsabilidade: Gerenciar informações dos pacientes, como dados pessoais, histórico médico, alergias, etc.
Endpoints principais:
POST /pacientes: Cadastro de novos pacientes.
GET /pacientes/{id}: Consultar dados de um paciente específico.
PUT /pacientes/{id}: Atualizar dados de um paciente.
GET /pacientes: Listar todos os pacientes.
Tecnologias: Banco de dados relacional (ex: PostgreSQL), autenticação (JWT, OAuth).
2. Serviço de Médicos
Responsabilidade: Gerenciar dados dos médicos, como informações de especialidade, horários de disponibilidade, credenciais, etc.
Endpoints principais:
POST /medicos: Cadastro de novos médicos.
GET /medicos/{id}: Consultar dados de um médico específico.
PUT /medicos/{id}: Atualizar informações do médico.
GET /medicos: Listar médicos disponíveis por especialidade ou nome.
Tecnologias: Banco de dados relacional (ex: PostgreSQL), autenticação (JWT, OAuth).
3. Serviço de Agendamentos
Responsabilidade: Gerenciar os agendamentos de consultas entre pacientes e médicos, incluindo horário, data e status da consulta.
Endpoints principais:
POST /agendamentos: Agendar uma nova consulta.
GET /agendamentos/{id}: Consultar detalhes de um agendamento.
PUT /agendamentos/{id}: Atualizar o agendamento (ex: reagendar).
GET /agendamentos: Listar agendamentos de um paciente ou médico.
Tecnologias: Banco de dados de agendamentos (ex: MongoDB ou PostgreSQL), integração com APIs de calendário (Google Calendar, por exemplo).
4. Serviço de Faturamento
Responsabilidade: Gerenciar cobranças, pagamentos e recibos. Enviar notificações de pagamento e gerar faturas para os pacientes.
Endpoints principais:
POST /faturamento: Gerar uma nova fatura após a consulta.
GET /faturamento/{id}: Consultar o status de pagamento de uma fatura.
PUT /faturamento/{id}/pago: Marcar uma fatura como paga.
Tecnologias: Integração com gateways de pagamento (Stripe, PayPal), sistemas de geração de PDF (para recibos).
5. Serviço de Prontuário Eletrônico
Responsabilidade: Armazenar e gerenciar os registros médicos dos pacientes, como laudos de exames, prescrições, diagnósticos e histórico de consultas.
Endpoints principais:
POST /prontuario/{pacienteId}: Adicionar um novo registro médico.
GET /prontuario/{pacienteId}: Consultar o histórico médico do paciente.
PUT /prontuario/{id}: Atualizar ou corrigir um registro médico.
Tecnologias: Banco de dados de documentos (ex: MongoDB), criptografia e segurança de dados sensíveis (SSL/TLS, HIPAA compliance).
6. Serviço de Notificações
Responsabilidade: Enviar notificações de lembretes de consultas, confirmações de agendamentos, atualizações de status de pagamento e outros alertas.
Endpoints principais:
POST /notificacoes: Enviar uma notificação.
GET /notificacoes/{usuarioId}: Consultar notificações de um paciente ou médico.
Tecnologias: Sistemas de envio de e-mail (SendGrid), SMS (Twilio), Push notifications.
7. Serviço de Autenticação e Autorização
Responsabilidade: Gerenciar login, registro de usuários (pacientes, médicos, administradores) e permissões de acesso.
Endpoints principais:
POST /login: Autenticar usuários.
POST /register: Registrar novos usuários.
POST /refresh-token: Renovar o token JWT.
Tecnologias: OAuth2, JWT, sistemas de autenticação (ex: Auth0).
8. Serviço de Relatórios e Analytics
Responsabilidade: Gerar relatórios financeiros, de desempenho de médicos, de pacientes, e outros indicadores relevantes para a clínica.
Endpoints principais:
GET /relatorios/financeiro: Gerar relatório financeiro.
GET /relatorios/desempenho-medico: Relatório de desempenho dos médicos.
Tecnologias: Ferramentas de BI (ex: Power BI, Tableau), integração com bancos de dados analíticos (ex: Apache Kafka para eventos, Apache Spark).
9. Serviço de Integração com Sistemas Externos
Responsabilidade: Integrar com sistemas de laboratórios de exames, farmácias e outros prestadores de serviços médicos.
Endpoints principais:
GET /exames/{pacienteId}: Consultar resultados de exames laboratoriais.
POST /prescricao: Enviar prescrição para farmácias parceiras.
Tecnologias: APIs RESTful, sistemas de fila (ex: RabbitMQ para comunicação assíncrona).
Exemplo de Fluxo de Trabalho
Cadastro do paciente: O paciente se cadastra no serviço de pacientes (POST /pacientes).
Agendamento de consulta: O paciente agenda uma consulta com um médico via o serviço de agendamentos (POST /agendamentos).
Realização de consulta: O médico realiza a consulta e registra informações no prontuário eletrônico (POST /prontuario).
Faturamento: O serviço de faturamento gera uma fatura baseada no agendamento e no tipo de consulta (POST /faturamento).
Notificação: O paciente recebe uma notificação sobre o agendamento e pagamento via o serviço de notificações (POST /notificacoes).
Benefícios da Arquitetura de Microserviços
Escalabilidade: Cada serviço pode ser escalado de forma independente, por exemplo, se o número de agendamentos crescer, o serviço de agendamentos pode ser escalado separadamente dos demais.
Desenvolvimento Independente: Times podem trabalhar em diferentes serviços sem afetar o trabalho de outros.
Resiliência: Se um serviço falhar (por exemplo, o serviço de faturamento), outros serviços (como o de pacientes ou médicos) podem continuar funcionando normalmente.
Essa arquitetura permite que a aplicação da clínica médica seja mais flexível, com componentes bem definidos que podem ser facilmente mantidos, testados e escalados.
